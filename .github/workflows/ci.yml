name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  all:
    if: always()
    name: all-jobs
    runs-on: ubuntu-latest
    needs:
      - build
      - release
      - build_clang
    steps:
      - run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'

  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - build_clang
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            *.tar.xz
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job:
          - { target: gcc8, os: ubuntu, variant: focal }
          - { target: gcc14, os: ubuntu, variant: focal }

    container:
      image: ghcr.io/benjaminkern/ci-images/ubuntu/20.04:main
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.github_token }}

    steps:
      - uses: actions/checkout@v4
      - name: Prepare config
        run: >
          cp ${{ matrix.job.os }}/${{ matrix.job.variant }}/${{ matrix.job.target }}/crosstool.config .config
      - name: Configure toolchain
        run: >
          ct-ng olddefconfig
      - name: Build
        run: >
          ct-ng build
      - name: Create archive
        run: >
          tar -cJf ${{ matrix.job.target }}-linux-gnu.tar.xz -C ~/x-tools/
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.job.target }}
          path: ${{ matrix.job.target }}-linux-gnu.tar.xz

  build_clang:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job:
          - { version: 20.1.1 }

    container:
      image: ghcr.io/benjaminkern/ci-images/ubuntu/20.04:main
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.github_token }}

    steps:
      - uses: actions/checkout@v4
      - name: Fetch llvm-project
        run: |
          mkdir -p llvm-project
          curl -Ls https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.job.version }}/llvm-project-${{ matrix.job.version }}.src.tar.xz | tar xJf - -strip=1 -C llvm-project
      - name: Configure
        run: >
          CC=clang-18 CXX=clang++-18 cmake -GNinja -S llvm-project/llvm -Bbuild -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi" -DLLVM_ENABLE_PROJECTS="bolt;clang;clang-tools-extra;lld;lldb"
      - name: Build and package archive
        run: >
          cmake --build build --target package
      - name: Show build folder content
        run: >
          ls -al build
